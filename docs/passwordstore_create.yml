- hosts: passwordme
  become: true
  gather_facts: true

  vars:

  - passwordstore_update_password    : 'always' # Always update the password on the targeted system when the password changes.   
#  - passwordstore_passwordstore     : '~/.password-store'
  - passwordstore_entry_root         : 'Workstations'
  - passwordstore_entry_user         : 'bsmith'
  - passwordstore_entry_user_comment : 'the bsmith user'

  tasks:

   - name: "Create a passwordstore entry and password if none exists and set the users password"
     user:
       name    : 'bsmith'
      update_password : 'always'
       password: "{{ lookup('passwordstore', 'example/test create=true overwrite=true') | password_hash('sha512') }}"

   - name: Basic lookup. Fails if example/test doesn't exist
     debug: msg="{{ lookup('passwordstore', 'example/test')}}"


#      password: "{{ lookup('passwordstore', 'test-passwords/' + ansible_fqdn)|default(lookup('passwordstore', 'test-passwords/default create=true' true), true) }}"    
#      name    : '{{ passwordstore_entry_user }}'
#      comment : '{{ passwordstore_entry_user }}' # GECOS account description
#      password: "{{ lookup('passwordstore', 'Workstations/workstation-001/bsmith create=true overwrite=true' )}}"
#      update_password: '{{ passwordstore_update_password }}'


# Debug is used for examples, BAD IDEA to show passwords on screen
#  - name: Basic lookup. Fails if example/test doesn't exist
#    debug: msg="{{ lookup('passwordstore', 'example/test')}}"

#  - name: Create pass with random 16 character password. If password exists just give the password
#    debug: var=mypassword
#    vars:
#      mypassword: "{{ lookup('passwordstore', 'example/test create=true')}}"

#  - name: Different size password
#    debug: msg="{{ lookup('passwordstore', 'example/test create=true length=42')}}"

#  - name: Create password and overwrite the password if it exists. As a bonus, this module includes the old password inside the pass file
#    debug: msg="{{ lookup('passwordstore', 'example/test create=true overwrite=true')}}"

#  - name: Return the value for user in the KV pair user, username
#    debug: msg="{{ lookup('passwordstore', 'example/test subkey=user')}}"

#  - name: Return the entire password file content
#    set_fact: passfilecontent="{{ lookup('passwordstore', 'example/test returnall=true')}}"


